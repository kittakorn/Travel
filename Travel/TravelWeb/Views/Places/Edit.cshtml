@model TravelWeb.Models.Place

@{
    ViewBag.Title = "แก้ไขข้อมูล";
}
<h4>แก้ไขข้อมูล</h4>

<hr />
<div class="row">
    <div class="col-md-7">
        @using (Html.BeginForm("Edit", "Places", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.HiddenFor(x => x.PlaceId)
            @Html.HiddenFor(x => x.PlaceImage)
            @Html.HiddenFor(x => x.PlaceVisitor)
            @Html.AntiForgeryToken()
            <div class="form-group">
                @Html.LabelFor(model => model.PlaceName)
                @Html.EditorFor(model => model.PlaceName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PlaceName, "", new { @class = "text-danger" })
            </div>
            <div class="form-row">
                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.PlaceCategoryId)
                    @Html.DropDownList("PlaceCategoryId", null, htmlAttributes: new { @class = "selectpicker form-control", data_style = "btn-outline-primary", data_live_search = "true" })
                </div>
                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.PlaceProvinceId)
                    @Html.DropDownList("PlaceProvinceId", null, htmlAttributes: new { @class = "selectpicker form-control", data_style = "btn-outline-primary", data_live_search = "true" })
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-7">
                    @Html.LabelFor(model => model.PlaceDescription)
                    @Html.EditorFor(model => model.PlaceDescription, new { htmlAttributes = new { @class = "form-control", rows = "7" } })
                    @Html.ValidationMessageFor(model => model.PlaceDescription, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-5">
                    @Html.LabelFor(model => model.PlaceOpenDate)
                    @Html.EditorFor(model => model.PlaceOpenDate, new { htmlAttributes = new { @class = "form-control", rows = "7" } })
                    @Html.ValidationMessageFor(model => model.PlaceOpenDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.PlaceAddress)
                @Html.EditorFor(model => model.PlaceAddress, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PlaceAddress, "", new { @class = "text-danger" })
            </div>
            <div class="form-row">
                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.PlacePhone)
                    @Html.EditorFor(model => model.PlacePhone, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PlacePhone, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.PlaceImage)
                    <input type="file" class="form-control" name="placeImageList" multiple id="placeImageList" accept="image/*" />
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.PlaceRating)
                    @Html.EditorFor(model => model.PlaceRating, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PlaceRating, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-5">
                    @Html.LabelFor(model => model.PlaceLatitude)
                    @Html.EditorFor(model => model.PlaceLatitude, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PlaceLatitude, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-5">
                    @Html.LabelFor(model => model.PlaceLongitude)
                    @Html.EditorFor(model => model.PlaceLongitude, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PlaceLongitude, "", new { @class = "text-danger" })
                </div>
            </div>
            <button type="submit" class="btn btn-primary" style="float: right">บันทึกข้อมูล</button>
        }
    </div>
    <div class="col-md-5">
        <div class="form-row">
            <div class="form-group col-md-12">
                <label>ค้นหา</label>
                <input id="pac-input" class="form-control" type="text">
                <br />
                <div id="map" style="width: 100%; height: 400px;"></div>
            </div>
            <div class="form-group">
                @foreach (var image in Model.PlaceImage.Split(','))
                {
                    <a href="@Url.Action("DeleteImage",new{id=Model.PlaceId,imageName=image})" onclick="return confirm('ยืนยันการลบรูปภาพ');">
                        <img src="~/Images/@image" class="img-thumbnail" style="width: 220px !important; height:220px!important" />
                    </a>
                }
            </div>
        </div>

    </div>
</div>

<link href="~/Content/bootstrap-select.min.css" rel="stylesheet" />
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/bootstrap-select.min.js"></script>

    <script>
        $('.selectpicker').selectpicker();
        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: @Model.PlaceLatitude, lng: @Model.PlaceLongitude },
                zoom: 13,
                mapTypeId: 'roadmap'
            });

            // Create the search box and link it to the UI element.
            var input = document.getElementById('pac-input');
            var searchBox = new google.maps.places.SearchBox(input);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function () {
                searchBox.setBounds(map.getBounds());
            });

            var markers = [];
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('places_changed', function () {
                var places = searchBox.getPlaces();

                if (places.length == 0) {
                    return;
                }

                // Clear out the old markers.
                markers.forEach(function (marker) {
                    marker.setMap(null);
                });
                markers = [];

                // For each place, get the icon, name and location.
                var bounds = new google.maps.LatLngBounds();
                places.forEach(function (place) {
                    if (!place.geometry) {
                        console.log("Returned place contains no geometry");
                        return;
                    }
                    var icon = {
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(25, 25)
                    };

                    // Create a marker for each place.
                    markers.push(new google.maps.Marker({
                        map: map,
                        icon: icon,
                        title: place.name,
                        position: place.geometry.location
                    }));

                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }

                    console.log(place);
                    $('#PlaceName').val(place.name);
                    $('#PlaceRating').val(place.rating);
                    $('#PlaceOpenDate').val(place.opening_hours.weekday_text.toString().replace(/,/g, '\n'));
                    $('#PlaceAddress').val(place.formatted_address);
                    $('#PlacePhone').val(place.formatted_phone_number);
                    $('#PlaceLatitude').val(place.geometry.location.lat());
                    $('#PlaceLongitude').val(place.geometry.location.lng());

                });
                map.fitBounds(bounds);
            });
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAkadrBnn4vIzK1XTlxmXsJ2EIFvVQGjuw&libraries=places&callback=initMap"
            async defer></script>
}

